/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package virtu.systems.demo.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import virtu.systems.demo.api.dto.ContractCreateRequestDto;
import virtu.systems.demo.api.dto.ContractDto;
import virtu.systems.demo.api.dto.ContractUpdateRequestDto;
import virtu.systems.demo.api.dto.ContractsResponseDto;

import javax.validation.Valid;

@Api(value = "Contract", description = "the Contract API")
public interface ContractApi {

    @ApiOperation(value = "Contract", nickname = "getContractById", notes = "", response = ContractDto.class, tags={ "Contract", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ContractDto.class) })
    @RequestMapping(value = "/contract/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ContractDto> getContractById(@ApiParam(value = "Id of Contract",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "contract list", nickname = "getContracts", notes = "Список договоров", response = ContractsResponseDto.class, tags={ "Contract", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ContractsResponseDto.class) })
    @RequestMapping(value = "/contracts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ContractsResponseDto> getContracts();


    @ApiOperation(value = "Add new Contract", nickname = "postContract", notes = "Добавление нового договора", response = ContractDto.class, tags={ "Contract", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ContractDto.class) })
    @RequestMapping(value = "/contract",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ContractDto> postContract(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ContractCreateRequestDto contract);


    @ApiOperation(value = "Update Contract", nickname = "putContract", notes = "Изменение данных договора", response = ContractDto.class, tags={ "Contract", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ContractDto.class) })
    @RequestMapping(value = "/contract",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ContractDto> putContract(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ContractUpdateRequestDto contract);

}
